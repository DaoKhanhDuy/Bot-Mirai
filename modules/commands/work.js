module.exports.config = {
    name: "work",
    version: "1.0.3",
    hasPermssion: 0,
    credits: "DuyVuongUwU",
    description: "work 3 khu ? ( 5k )",
    commandCategory: "game",
    cooldowns: 3,
    envConfig: {
        cooldownTime: 1200000
    }
};

module.exports.handleReply = async function ({ event, api, Currencies, handleReply }) {
if (String(event.senderID) !== String(handleReply.author)) return;
const { body, threadID, messageID, senderID } = event;
const { type } = handleReply;
    const cooldown = global.configModule[this.config.name].cooldownTime;
    let data = (await Currencies.getData(senderID)).data || {};
    if (typeof data !== "undefined" && cooldown - (Date.now() - data.workTime) > 0) {
        var time = cooldown - (Date.now() - data.workTime),
            minutes = Math.floor(time / 60000),
            seconds = ((time % 60000) / 1000).toFixed(0);
        
        return api.sendMessage(`B·∫°n ƒëang trong th·ªùi gian ch·ªù\nVui l√≤ng th·ª≠ l·∫°i sau: ${minutes} ph√∫t ${(seconds < 10 ? "0" : "")}${seconds} gi√¢y.`, event.threadID, event.messageID);
    }
switch (type) {
    case "workvip":
    switch (body) {
        case "1": {
        // khu c√¥ng nghi·ªáp
                    const job = [
            "ƒëi b√°n v√© s·ªë",
            "ƒëi s·ª≠a xe",
            "l√†m nh√¢n vi√™n l·∫≠p tr√¨nh",
            "ƒëi hack facebook",
            "l√†m th·ª£ s·ª≠a ·ªëng n∆∞·ªõc ( Õ°¬∞ Õú ñ Õ°¬∞)",
            "l√†m ƒë·∫ßu b·∫øp",
            "l√†m th·ª£ h·ªì",
            "fake taxi",
            "ƒëi gangbang ng∆∞·ªùi kh√°c",
            "l√†m re s·ªù chym m·ªù",
            "ƒëi b√°n h√†ng online",
            "l√†m n·ªôi tr·ª£",
            "ƒëi v·∫£ m·∫•y th·∫±ng sao ƒë·ªè, giun v√†ng",
            "ƒëi b√°n hoa",
            "t√¨m jav/hentai code cho Nghƒ©a",
            "ƒëi ch∆°i Yasuo trong rank v√† g√°nh team",
            "nu√¥i t√¥i trong su·ªët 5 th√°ng"
        ];
        const amount = Math.floor(Math.random() * 1000);
        return api.sendMessage(`B·∫°n ${job[Math.floor(Math.random() * job.length)]} v√† ƒë√£ nh·∫≠n ƒë∆∞·ª£c s·ªë ti·ªÅn l√†: ${amount} coins`, threadID, async () => {
            await Currencies.increaseMoney(senderID, parseInt(amount));
            data.workTime = Date.now();
            await Currencies.setData(event.senderID, { data });
            return;
        }, messageID);}
        case "2": {
        const job = [
     "nh·∫∑t ƒë∆∞·ª£c 1 c·ª•c v√†ng",
     "ƒë√†o ƒë∆∞·ª£c 1 c·ª•c v√†ng",
     "ƒë√†o ƒë∆∞·ª£c 3 c·ª•c than",
     "ƒë√†o ƒë∆∞·ª£c 90 c·ª•c s·∫Øt",
     "ƒë√†o ƒë∆∞·ª£c 1 c·ª•c s·∫Øt",
     "ƒë√†o ƒë∆∞·ª£c 3 c·ª•c s·∫Øt",
     "ƒë√†o ƒë∆∞·ª£c 90 c·ª•c than",
     "ƒë√†o ƒë∆∞·ª£c 23 c·ª•c v√†ng",
     "ƒë√†o ƒë∆∞·ª£c 90 c·ª•c than"
    ];
    const amount = Math.floor(Math.random() * 1000);
        return api.sendMessage(`B·∫°n ${job[Math.floor(Math.random() * job.length)]} v√† ƒë√£ nh·∫≠n ƒë∆∞·ª£c s·ªë ti·ªÅn l√†: ${amount} coins`, threadID, async () => {
            await Currencies.increaseMoney(senderID, parseInt(amount));
            data.workTime = Date.now();
            await Currencies.setData(event.senderID, { data });
            return;
        }, messageID)};
        case "3": {
            const job = [
   "ƒë√†o ƒë∆∞·ª£c d·∫ßu m·ªè v√† thu ƒë∆∞·ª£c 5 th√πng d·∫ßu",
   "ƒë√†o ƒë∆∞·ª£c d·∫ßu m·ªè v·∫£ thu ƒë∆∞·ª£c 90 th√πng d·∫ßu",
   "ƒë√†o ƒë∆∞·ª£c d·∫ßu m·ªè v√† thu ƒë∆∞·ª£c 30 th√πng d·∫ßu",
   "ƒë√†o ƒë∆∞·ª£c d·∫ßu m·ªè v√† thu ƒë∆∞·ª£c 900 th√πng d·∫ßu",
   "ƒë√†o ƒë∆∞·ª£c d·∫ßu m·ªè v√† thu ƒë∆∞·ª£c 1 th√πng d·∫ßu",
   "ƒë√†o ƒë∆∞·ª£c d·∫ßu m·ªè v√† thu ƒë∆∞·ª£c 92 th√πng d·∫ßu",
   "ƒë√†o ƒë∆∞·ª£c d·∫ßu m·ªè v√† thu ƒë∆∞·ª£c 89 th√πng d·∫ßu"
   ];
   const amount = Math.floor(Math.random() * 1000);
        return api.sendMessage(`B·∫°n ${job[Math.floor(Math.random() * job.length)]} v√† ƒë√£ nh·∫≠n ƒë∆∞·ª£c s·ªë ti·ªÅn l√†: ${amount} coins`, threadID, async () => {
            await Currencies.increaseMoney(senderID, parseInt(amount));
            data.workTime = Date.now();
            await Currencies.setData(event.senderID, { data });
            return;
        }, messageID);
    }
        default : 
        return api.sendMessage(`Sai c√∫ ph√°p.`,event.threadID,event.messageID);
    }
}
}
module.exports.run = async function ({ api, event, args, Users, permssion, getText }) {
const { body, threadID, messageID, senderID } = event;
return api.sendMessage(`‚óÜ‚îÅ‚îÅ‚óÜ üå∏ WORKING üå∏ ‚óÜ‚îÅ‚îÅ‚óÜ\n\n¬ª M·ªùi b·∫°n nh·∫≠p l·ª±a ch·ªçn ¬´\n1/ Khu c√¥ng nghi·ªáp\n2/ Khu m·ªè qu·∫∑ng\n3/ khu m·ªè d·∫ßu\nüõ†. ƒëang c·∫≠p nh·∫≠p th√™m...\n\n¬ª H√£y reply tin nh·∫Øn v√† ch·ªçn theo s·ªë ¬´`, threadID, (error, info) => {
                global.client.handleReply.push({
                    name: this.config.name,
                    messageID: info.messageID,
                    author: event.senderID,
                    type: "workvip"
                });
            }, messageID);

}